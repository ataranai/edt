(defvar edt-java-tool-mode-map (make-sparse-keymap) "edt java tool key map")
(define-key edt-java-tool-mode-map "d" 'java-dump)
(define-key edt-java-tool-mode-map "k" 'java-kill)

(defvar edt-java-tool-default-directory nil)

(defun java-pid ()
  (interactive)
  (set-buffer (get-buffer-create "*Java PID*"))
  (kill-buffer "*Java PID*")
  (set-buffer (get-buffer-create "*Java PID*"))
  (insert (shell-command-to-string "jps -ml"))
  (progn 
    (goto-char 0)
;   (loop for i from 1 to (count-lines (point-min) (point-max)) do
    (let ((i 0))
      (while (< i (count-lines (point-min) (point-max)))
	  (incf i)
	  (setq line-str (buffer-substring-no-properties (point-at-bol) (point-at-eol)))
	  (setq ps-line (string-match " " line-str))
	  (setq color-fn '(foreground-color . "#729FCF"))
	  (if (numberp (string-match "org.jboss.Main" line-str)) (setq color-fn '(foreground-color . "red")))
	  (if (numberp (string-match "org.jboss.as.standalone" line-str)) (setq color-fn '(foreground-color . "red")))
	  (if (numberp (string-match "org.jboss.as.process-controller" line-str)) (setq color-fn '(foreground-color . "#8AE234")))
	  (if (numberp (string-match "org.jboss.as.host-controller" line-str)) (setq color-fn '(foreground-color . "#8AE234")))
	  (if (numberp (string-match "org.jboss.as.server" line-str)) (setq color-fn '(foreground-color . "red")))
	  (if (numberp (string-match "org.jboss.as.cli" line-str)) (setq color-fn '(foreground-color . "#34E2E2")))
	  (put-text-property (point) (+ (point) ps-line) 'face color-fn)
	  (forward-line 1))))
  (setq buffer-read-only t)
  (goto-char (point-min))
  (use-local-map edt-java-tool-mode-map)
  (pop-to-buffer (current-buffer))
)

(defun java-kill ()
  (interactive)
  (setq pid_line (buffer-substring-no-properties (point-at-bol) (point-at-eol)))
  (setq pid_line (replace-regexp-in-string "^\\s-+\\|\\s-+$" "" pid_line))
  (delete-window)
  (java-kill-pid (substring pid_line 0 (string-match " " pid_line)))
)

(defun java-kill-pid (pid)
  (interactive "sPID : ")
  (shell-command-to-string (concat "kill -9 " pid))
)

(defun java-dump ()
  (interactive)
  (setq pid_line (buffer-substring-no-properties (point-at-bol) (point-at-eol)))
  (setq pid_line (replace-regexp-in-string "^\\s-+\\|\\s-+$" "" pid_line))
  (java-dump-pid (substring pid_line 0 (string-match " " pid_line)))
)

(defun java-dump-pid (pid)
  (interactive "sPID : ")
  (set-buffer (generate-new-buffer (concat "Java Dump/PID:" pid)))
  (insert (concat "PID : " pid "\n" (shell-command-to-string (concat "jstack " pid))))
  (setq buffer-read-only t)
  (goto-char (point-min))
  (pop-to-buffer (current-buffer))
  (delete-other-windows)
)

(defun java-stack-jump (src_dir)
  (interactive (list (read-directory-name "Input source code directory : " edt-java-tool-default-directory)))
  (java-stack-jump-execute src_dir (buffer-substring-no-properties (point-at-bol) (point-at-eol)))
)


(defun java-stack-jump-execute (src_dir trace_line)
  (setq trace_line (replace-regexp-in-string "^\\s-+\\|\\s-+$" "" trace_line))
  (setq code_nm (substring trace_line (+ (string-match ":" trace_line) 1) -1))
  
  (setq trace_line (substring trace_line 3 (string-match "(" trace_line)))

  (setq some-list nil)
  (let ((n2 (string-match "\\." trace_line)))
    (while (>= n2 0)
      (setq some-list (cons (substring trace_line 0 n2) some-list))
      (setq trace_line (substring trace_line (+ n2 1)))
      (setq n2 (string-match "\\." trace_line))
      (if  n2 ()
	(setq n2 -1)
	(setq some-list (cons trace_line some-list))
	)
      )
    )

  (setq pre_java_file (car (cdr some-list)))
  (let ((n1 (string-match "\\$" pre_java_file)))
    (if n1 (setq pre_java_file (substring pre_java_file 0 n1))))
  (setq java_file (concat pre_java_file ".java"))
  (setq java_file_full (concat (mapconcat 'identity (reverse (nthcdr 2 some-list)) "/") "/" java_file))
  (setq src_file_path (replace-regexp-in-string "\n+$" "" (shell-command-to-string (concat "find " src_dir " -name " java_file " | grep " java_file_full " | head -n1"))))
  (if (eq (string-match java_file_full src_file_path) nil) (message (concat "Could not find the " java_file " under the " src_dir))
    (find-file src_file_path)
    (setq buffer-read-only t)
    (linum-mode t)
    (goto-line (string-to-number code_nm)))
)

(provide 'edt-java-tool)
